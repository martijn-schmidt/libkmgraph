/** @mainpage LibKMGraph

\section purpos Purpos

LibKMGraph is a library that implements various Microsoft Graph APIs so that
3rd party applications can easily integrate with Microsoft services.

\section desc Description

<h1>Architecture</h1>

<h2> Objects</h2>
Every entity (Contact, Calendar, Event, ...) is represented by it's own
object. Objects are encapsulated in KMGraph::Objects namespace. Where possible,
the objects are subclasses from already available KDE classes to provide even
more easy and simple integration. KMGraph::Objects::Event is subclassed from
KCalCore::Event, KMGraph::Objects::Task from KCalCore::Task etc. All objects
are implicitly shared, so you can copy the objects without much of an overhead.

<h2>Services</h2>
Each Microsoft Graph's API is represented by a service. Services are located in KMGraph::Services
namespace. Usually, users don't need to use KMGraph::Services, as the AccessManager handles
parsing and serialization on its own.

<h2>Core</h2>
The core part of the library consits of KMGraph::AccessManager, KMGraph::Request, KMGraph::Reply
The AccessManager, Request and Reply are inspired by QNetworkAccessManager, QNetworkRequest
and QNetworkReply and are even used the same way. Only one instance of KMGraph::AccessManager
per application is usually needed and users then send requests by passing KMGraph::Request
to an instance of the manager. When request is processed and manager receives reply from
Microsoft, it automatically parses the response and through replyReceived() signal provides
KMGraph::Reply with already parsed data to user.

<h2>Authentication</h2>
Authentication is handeled by KMGraph::Auth and KMGraph::Account. KMGraph::Auth is a singleton
that provides access to password-storage backend - at this moment it's on KWallet.
KMGraph::Account represents a user account on Microsoft Graph and stores tokens to authorize requests
sent to Microsoft Graph.

<h1>Examples</h1>
For examples of how to use LibKMGraph in KDE applications, please refer to example programs in
the /examples folder. To compile examples, pass -DBUILD_EXAMPLES=TRUE to CMake.

@authors
Dan Vratil \<dan@progdan.cz\>
Jan Grulich \<grulja@gmail.com\>
Martijn Schmidt \<martijn.schmidt@gmail.com\>

@maintainers
Martijn Schmidt \<martijn.schmidt@gmail.com\>

@licenses
@gplv2

// DOXYGEN_PROJECTNAME=LibKMGraph
