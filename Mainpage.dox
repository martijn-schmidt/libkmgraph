/** @mainpage LibKMGraph

\section purpos Purpos

LibKMGraph is a library that implements various Microsoft Graph APIs so that
3rd party applications can easily integrate with Microsoft services.

\section desc Description

<h1>Architecture</h1>

<h2> Objects</h2>
Every entity (OneDrive, ...) is represented by its own
object. Objects are encapsulated in KMGraph::Objects namespace. Where possible,
the objects are subclasses from already available KDE classes to provide even
more easy and simple integration. All objects are implicitly shared, so you can
copy the objects without much of an overhead.

<h2>Services</h2>
Each Microsoft Graph's API is represented by a service. Services are located in KMGraph::Services
namespace. Usually, users don't need to use KMGraph::Services, as the AccessManager handles
parsing and serialization on its own.

<h2>Core</h2>
The core part of the library consits of KMGraph::AccessManager, KMGraph::Request, KMGraph::Reply
The AccessManager, Request and Reply are inspired by QNetworkAccessManager, QNetworkRequest
and QNetworkReply and are even used the same way. Only one instance of KMGraph::AccessManager
per application is usually needed and users then send requests by passing KMGraph::Request
to an instance of the manager. When request is processed and manager receives reply from
Microsoft, it automatically parses the response and through replyReceived() signal provides
KMGraph::Reply with already parsed data to user.

<h2>Authentication</h2>
Authentication has mostly been handed over to the 3rd party application which uses LibKMGraph.
It is suggested that the 3rd party application in turn relies on KAccounts to perform all
OAuth2-related tasks such as username, password, scope and token management.

@authors
Dan Vratil \<dan@progdan.cz\>
Jan Grulich \<grulja@gmail.com\>
Martijn Schmidt \<martijn.schmidt@gmail.com\>

@maintainers
Martijn Schmidt \<martijn.schmidt@gmail.com\>

@licenses
@gplv2

// DOXYGEN_PROJECTNAME=LibKMGraph
